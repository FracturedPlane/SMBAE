{
    "comment__": "Type of model/network to use for the actor and critic",
"model_type": "Deep_CNN_Dropout_Critic",
    "comment__": "Learning algorithm to use",
"agent_name": "A_CACLA",
    "comment__": "Folder to store the training data in.",
"data_folder": "Gaps_Sphere_Parameterized",
	"comment": "initial probability of selecting a random action",
"epsilon": 1.0, 
	"comment": "initial probability of selecting a discrete random action",
"omega": 0.01,
    "comment__": "Batch size used for learning",
"batch_size": 32,
    "comment__": "Learning rate for the actor/policy",
"learning_rate": 0.0005,
    "comment__": "Config file for the simulator",
"sim_config_file": "./settings/gapGame2D/ballgame_settings_gaps.json",
    "comment__": "A different config file for the forward dynamics simulator",
"forwardDynamics_config_file": "./settings/gapGame2D/ballgame_settings_gaps.json",
    "comment__": "Exploration distance use when randomly generating new actions",
"exploration_rate": 0.1,
    "comment__": "Number of rounds to perform before termination",
"rounds": 50000,
    "comment__": "Number of epochs to perform per round",
"epochs": 10,
    "comment__": "Number of epoch/episode to evaluate the policy over",
"eval_epochs": 10,
    "comment__": "Discount factor used during learning",
"discount_factor": 0.8,
    "comment__": "Should the training be plotted during learning",
"visualize_learning": true,
    "comment__": "Whether or not to save the plotted data while learning",
"save_trainData": true,
    "comment__": "Whether or not to train a forward dynamics model as well",
"train_forward_dynamics": false,
    "comment__": "Bounds used for scaling rewards for networks",
"reward_bounds": [[0.0],[1.0]],
    "comment__": "Max length of the Experience memory",
"expereince_length": 10000,
    "comment__": "Possible state bounds to be used for scaling states for networks",
"state_bounds": [[ -0.1        , -0.18445414, -0.20698704, -0.19701838, -0.17200896,
        -0.13893099, -0.13828653, -0.13633886, -0.12351333, -0.13104105,
        -0.13568488, -0.13633886, -0.15308116, -0.17443997, -0.18258852,
        -0.19359115, -0.2       , -0.20366652, -0.20685534, -0.20584936,
        -0.19660911, -0.1766247 , -0.14231762, -0.11227103, -0.08544046,
        -0.10655246, -0.14877976, -0.17201769, -0.19183512, -0.20238042,
        -0.20702155, -0.20586629, -0.20187308, -0.19456862, -0.18216126,
        -0.1763332 , -0.16483109, -0.15424938, -0.15249324, -0.14769948,
        -0.14830743, -0.16104276, -0.16745643, -0.18216126, -0.18937218,
        -0.20073232, -0.20510948, -0.20710084, -0.20558155, -0.20064831,
        -0.19388169, -0.18514702, -0.18152586, -0.17748684, -0.19017158,
        -0.1952949 , -0.20095888, -0.20478851, -0.20705014, -0.20694876,
        -0.20435232, -0.20208904, -0.19896898, -0.19189259,  0.02452568,
         0.45558244,  0.5       ],
       [ 0.1       ,  0.32245412,  0.48698702,  0.61901838,  0.72000897,
         0.80293101,  0.80428654,  0.80833888,  0.83351332,  0.81904107,
         0.80968487,  0.80833888,  0.77108115,  0.71243995,  0.68458849,
         0.63759112,  0.60000002,  0.5696665 ,  0.51885533,  0.45784935,
         0.37860912,  0.29462472,  0.20431763,  0.14627104,  0.10344046,
         0.13655245,  0.21877976,  0.2800177 ,  0.35383511,  0.41838041,
         0.48902154,  0.5418663 ,  0.58587307,  0.6325686 ,  0.68616128,
         0.70633322,  0.74083108,  0.76824939,  0.77249324,  0.78369945,
         0.78230745,  0.75104278,  0.73345643,  0.68616128,  0.65737218,
         0.59473234,  0.55310947,  0.49710083,  0.45358154,  0.4046483 ,
         0.36388171,  0.325147  ,  0.31152585,  0.29748684,  0.34617159,
         0.37129489,  0.40695888,  0.44278851,  0.49105015,  0.51494873,
         0.5623523 ,  0.58408904,  0.606969  ,  0.64589256,  0.09200405,
         0.5501107 ,  2.5        ]],
    "comment__": "Action scaling values to be used to scale values for the network",
"action_bounds": [[-1.0, 1.0],
                  [1.0, 5.0]],
    "comment__": "Set of discrete actions that can be sampled from",				     
"discrete_actions": [[-0.92, 2.8],
                    [0.02, 3.0],
                    [0.3, 4.5],
                    [-0.4, 4.2],
                    [0.8, 4.9],
                    [-0.7, 3.0], 
                    [0.7, 4.6],
                    [-0.5, 2.6],
                    [-0.2, 3.6]],
    "comment__": "Is action space continuous or discrete?",
"action_space_continuous":true,
    "comment__": "Should the method train on the validation set only",
"train_on_validation_set":false,
    "comment__": "Name of the type of simulator to use",
"environment_type": "gapgame_2d",
    "comment__": "Model type to use for the forward dynamics model",
"forward_dynamics_predictor": "network",
    "comment__": "Method to be used for the forward dynamics model is the model types uses a simulator",
"sampling_method": "SequentialMC",
    "comment__": "Use the action suggested by the policy to start the sampling method.",
"use_actor_policy_action_suggestion": true,
    "comment__": "If selecting from a uniform distribution the number of regularly distant samples to take / action dimension",
"num_uniform_action_samples": 3,
    "comment__": "Number of steps ahead the actions should be sampled",
"look_ahead_planning_steps": 2,
    "comment__": "How often to update the training data and plots wrt # of rounds",
"plotting_update_freq_num_rounds": 10,
    "comment__": "How often to save the training data and plotting data",
"saving_update_freq_num_rounds": 10,
    "comment__": "Number of treads that can be run in parallel during training",
"num_available_threads": 1,
    "comment__": "Length of the queues used to pass simulation data between the simulation workers and the learning agent(s).",
"queue_size_limit": 100,
    "comment__": "Number of actions performed between training updates",
"sim_action_per_training_update": 8,
    "comment__": "Number of rounds of adaptive sampling",
"adaptive_samples": 5,
    "comment__": "Number of elite adaptive samples to keep between adaptive sampling rounds",
"num_adaptive_samples_to_keep": 50,
    "comment__": "Use the variance calculated from the policy network (calculated using dropout)",
"use_actor_policy_action_variance_suggestion": false,
    "comment__": "Method used for action exploration",
"exploration_method": "gaussian_random",
    "comment__": "Amount of dropout to use in the networks (if using a dropout network)",
"dropout_p": 0.1,
    "comment__": "Regularization weight for the policy network",
"regularization_weight": 0.00001,
    "comment__": "Some parameter for rmsprop stocastic gradient optimization method.",
"rho": 0.95,
    "comment__": "Some parameter for rmsprop stocastic gradient optimization method.",
"rms_epsilon": 0.000001,
    "comment__": "Number of training updates before the target network is updated",
"steps_until_target_network_update": 500,
    "comment__": "Initial factor epsilon in multiplied by (This value will slowly be reduced during training)",
"epsilon_annealing": 0.8,
    "comment__": "Different ways of calculating the scaling method used normalize the input and outputs of the network from the bootstrapping samples. minmax, input and output are -mean/max-min. variance, input and output are -mean/(std*2), given, use the bounds provided in this file",
"state_normalization": "given",
    "comment__": "load a pretrained model for the controller",
"load_saved_model": false,
	"comment__": "Number of updates the critic should perform per actor update",
"critic_updates_per_actor_update": 1,
    "comment__": "weather or not to clamp actions to stay inside the action boundaries",
"clamp_actions_to_stay_inside_bounds": false,
    "comment__": "Number of initial actions to sample before calculating input/output scaling and starting to train.",
"bootstrap_samples": 1000,
    "comment__": "What method to use to select actions during bootstrapping",
"bootsrap_with_discrete_policy": true,
    "comment__": "That max number of action that can be take before the end of an episode/epoch",
"max_epoch_length": 100,
    "comment__": "If reward is below this bound it will not be put in the Experience Buffer",
"reward_lower_bound": -0.5,
    "comment__": "Enable guided policy search. Uses MCMC sampling ahead in time to select the best action to keep",
"use_guided_policy_search" : false,
    "comment__": "The number of training updates to perform for every action that is simulated",
"training_updates_per_sim_action": 1,
    "comment__": "Use The forward dynamics simulator as a way of sampling suggested actions for exploration",
"use_sampling_exploration": false,
    "comment__": "Use the forward dyanmics model to perform action exploration wrt to V -> fd > delta Action gradients",
"use_model_based_action_optimization": true,
    "comment__": "Flag for policy evaluation to swap in the task network from one model and the character/robot network from another",
"use_transfer_task_network": false,
    "comment__": "Add a large cost to actions that are suggested to be outside the action bounds.",
"penalize_actions_outside_bounds": false,
    "comment__": "Network type to use for the forward dynamics model",
"forward_dynamics_model_type": "Deep_CNN",
    "comment__": "Whether or not to save the Experience memory after bootstrapping",
"save_experience_memory": false,
    "comment__": "Whether or not to train the policy and critic?",
"train_rl_learning": true,
    "comment__": "Force the character to start each new action in a good state, close to a good solution",
"use_back_on_track_forcing": false,
    "comment__": "draw/render the next state suggested by the forward dynamics model",
"visualize_forward_dynamics": false,
    "comment__": "Learning rate for the forward dynamics model",
"fd_learning_rate": 0.01,
    "comment__": "Whether or not to train the policy. Used for debugging",
"train_actor": true,
    "comment__": "Plot the terms for the critic as well (regularization and td error)",
"debug_critic": false,
    "comment__": "critic regularization weight",
"critic_regularization_weight": 0.000001,
    "comment__": "Critic learning rate",
"critic_learning_rate": 0.001,
    "comment__": "During evaluation plot of value function",
"visualize_expected_value": true,
    "comment__": "exponential decay value for use in reward function",
"target_velocity_decay":-2.5,
    "comment__": "Target velocity for controller",
"target_velocity":1.0,
    "comment__": "Number of terrain features for which convolutinoal filters should be used",
"num_terrain_features": 64,
    "comment__": "Initial tempurature for annealing of e-greedy exploration",
"initial_temperature": 1.25,
    "comment__": "epsilon lower limit",
"min_epsilon": 0.15,
    "comment__": "Whether or not to draw/render the simulation",
"shouldRender": false,
    "comment__": "Learning rate use for model based action exploration",
"action_learning_rate": 1.0,
    "comment__": "During model-based action exloration, Probability of a random action being generated from MBAE,",
"model_based_action_omega": 0.5,
	"comment__": "visualize the loss and regularization cost of the actor. Warning: might use a lot of memory",
"debug_actor": false,
	"comment__": "float type to use, if for example you want to train on the GPU use float32",
"float_type": "float64",
	"comment__": "What processor type to perform the training on [cpu|gpu]",
"training_processor_type": "cpu",
	"comment__": "optimizer is the type of optimization algorithm to use",
"optimizer": "adam",
	"comment__": "This setting uses a sampling method overtop of simulation",
"use_simulation_sampling": false,
	"comment__": "Variance scaling used for sampling",
"variance_scalling": 0.1,
	"comment__": "Whether or not to parameterize the control via the reward function, also adds parameters to input state",
"use_parameterized_control": true,
	"comment__": "parameter bounds for parameterized controller",
"controller_parameter_settings": {
		"velocity_bounds": [[0.5],[2.5]]
		},
	"comment__": "The parameter used to control the average change in the control parameters",
"average_parameter_change": 0.25,
	"comment__": "Whether or not to train the value function some output from the forward dynamics",
"train_critic_on_fd_output": false,
	"comment__": "Use to add an additional regularization term to prevent the network from moving to far from its previous values",
"use_previous_value_regularization": false,
	"comment__": "Controls the level of information that is printed to the terminal",
"print_level": "train",
	"comment__": "print level descriptions",
"print_levels": {
		"debug": 1,
		"train": 0,
		"hyper_train": -1
		},
	"comment__": "The type of function to apply over the controller target values [gaussian|abs]",
"reward_smoother": "abs",
	"comment__": "Weights for different components of the reward function",
"controller_reward_weights": {
		"velocity": 0.8,
		"torque": 0.05,
		"root_height": 0.05,
		"root_pitch": 0.1,
		"right_hand_x_pos": 0.0
		},
	"comment__": "Regularization weight for different between policy parameters and old policy parameters",
"previous_value_regularization_weight":  0.01,
	"comment__": "Random seed value for the simulation to use",
"random_seed": 1234,
	"comment__": "KL divergence threshold between policy updates",
"kl_divergence_threshold": 0.01,
	"comment__": "Makes a few changes to the flow of control in order for things to be on policy",
"on_policy": false,
	"comment__": "Whether or not to use a stochastic policy, This adds more outputs to the network and changes the way actions are sampled",
"use_stocastic_policy": false,
	"comment__": "Whether or  not to train the critic at all. Usually used for debugging",
"train_critic": true,
	"comment__": "What type of regularization to use",
"regularization_type": "kl",
	"comment__": "Whether or not to collects tuples in batches, this can be good for multi-threading or computing furture discounted reward",
"collect_tuples_in_batches":false,
	"comment__": "Whether or not the controller should be reset to a new epoch when a fall (fallen into some kind of non-recoverable state) has occured",
"reset_on_fall":true,
	"comment__": "Whether a model of the reward r <- R(s,a) should be trained",
"train_reward_predictor": true,
	"comment__": "How many gradient steps model based actino exploration should take",
"num_mbae_steps": 1,
    "comment__": "Whether or not the actor buffer should be fixed to process batches of a certain size",
"fix_actor_batch_size": true,
	"comment__": "Whether or not to weight the actor loss update by the advantage of each action",
"dont_use_advantage": false
}