{
    "comment__": "Type of model/network to use for the actor and critic",
"model_type": "Deep_NN_Wide",
    "comment__": "Learning algorithm to use",
"agent_name": "A_CACLA",
    "comment__": "Folder to store the training data in.",
"data_folder": "Simple_Walk_Flat",
	"comment": "initial probability of selecting a random action",
"epsilon": 0.50, 
	"comment": "initial probability of selecting a discrete random action",
"omega": 0.1,
    "comment__": "Batch size used for learning",
"batch_size": 32,
    "comment__": "Learning rate for the actor/policy",
"learning_rate": 0.0001,
    "comment__": "Config file for the simulator",
"sim_config_file": "./args/genBiped2D/opt_args_imitate_biped.txt",
    "comment__": "A different config file for the forward dynamics simulator",
"forwardDynamics_config_file": "./args/genBiped2D/opt_args_imitate_biped.txt",
	"comment__": "Data use to create anchors for pendulum",
"anchor_file": "../data/anchorData/paperGibbonAnchors.json",
    "comment__": "Exploration distance use when randomly generating new actions",
"exploration_rate": 0.1,
    "comment__": "Number of rounds to perform before termination",
"rounds": 5000000,
    "comment__": "Number of epochs to perform per round",
"epochs": 10,
    "comment__": "Number of epoch/episode to evaluate the policy over",
"eval_epochs": 10,
    "comment__": "Discount factor used during learning",
"discount_factor": 0.8,
    "comment__": "Should the training be plotted during learning",
"visualize_learning": true,
    "comment__": "Whether or not to save the plotted data while learning",
"save_trainData": true,
    "comment__": "Whether or not to train a forward dynamics model as well",
"train_forward_dynamics": false,
    "comment__": "Bounds used for scaling rewards for networks",
"reward_bounds": [[-10.1],[0.0]],
    "comment__": "Max length of the Experience memory",
"expereince_length": 20000,
    "comment__": "Possible state bounds to be used for scaling states for networks",
"state_bounds": [[ 0.29544723, -0.19075078,  0.06202744, -0.08982029, -0.22154082,
        -0.364867  , -0.5661909 , -0.60907245, -0.88264793, -0.13868065,
        -0.23159233, -0.45553389, -0.62981099, -0.73160827, -0.92366618,
        -0.80681145, -2.60646749, -1.14020813, -1.57655954, -2.26167965,
        -1.24335229, -3.21762609, -1.67353439, -0.87896538, -1.85425806,
        -1.83332467, -1.30647397, -3.22524714, -1.51923192,  0.73310971,
         -0.1        ,-0.19      , -0.08861925, -0.19407119, -0.32845989,
        -0.5581789 , -0.51716584, -0.80375981, -0.08427521, -0.1938509 ,
        -0.31393009, -0.56074023, -0.49264339, -0.80689788,  0.57773203,
        -0.50083631,  0.45290428, -0.69045472, -0.71740526, -1.12014353,
        -1.76450849, -1.41239357,  0.4174532 , -0.6879738 , -0.73933506,
        -1.13987076, -1.77514923, -1.41752636],
       [ 0.86267906,  0.159669  ,  0.25896928,  0.25467727, -0.0104376 ,
         0.49076653, -0.09904824,  0.56346053, -0.07402586,  0.18106586,
        -0.06409773,  0.25275055, -0.04099027,  0.20334645,  0.08194963,
         2.84772229,  0.99924797,  3.12030816,  0.68140119,  4.25618696,
         1.10834301,  4.99871969,  2.05306506,  2.59241462,  0.88419259,
         3.05349755,  1.34491789,  3.78121161,  2.38385916,  0.7931993 ,
         0.1        ,  0.29      ,  0.15737827, -0.12324642,  0.32841998,
        -0.38344547,  0.43874806, -0.54597855,  0.15963434, -0.12232977,
         0.34068564, -0.38549405,  0.45933196, -0.55242181,  2.49338078,
         0.48239726,  2.65460587,  0.66666925,  3.86206913,  1.05739963,
         4.92082882,  1.30686378,  2.60930395,  0.63427621,  3.73558354,
         1.01353884,  4.80070972,  1.25020468]],
    "comment__": "Action scaling values to be used to scale values for the network",				     
"action_bounds": [[-2.57, -3.14, -1.57, -2.57, -3.14, -1.57],
				  [ 2.57,  0.0,   1.57,  2.57,  0.0,   1.57]],
	"comment__": "Set of discrete actions that can be sampled from",	
	"comment__": "   grab_elbow_desired_position, grab_arm_release_angle, next_grab_time, free_elbow_angle",								  
"discrete_actions": [[-0.1, -2.3,   0.15,  -1.35, -3.0,  1.2],
		             [-0.2, -0.74,  1.25,  -0.11, -1.3,  0.7],
		             [-0.1, -0.4,   0.35,  -1.44,  0.3, -1.1],
		             [0.1, -2.45,   0.45,  -0.53, -1.43, 0.7],
		             [-0.1, -0.55,  0.35,   1.23,  0.3,  1.17],
		             [ 0.14, -0.45,-0.45,  -0.15, -1.53, 1.27],
		             [ 0.1,  -3.1,  0.55,  -0.12,  0.3, -0.7],
		             [-0.1,  -0.65,-0.35,  -0.67, -2.3,  0.7],
		             [-0.1,   0.25, 0.30,   1.71,  0.3,  1.17]], 
    "comment__": "Is action space continuous or discrete?",
"action_space_continuous":true,
    "comment__": "Should the method train on the validation set only",
"train_on_validation_set":true,
    "comment__": "Name of the type of simulator to use",
"environment_type": "terrainRLImitateBiped2D",
    "comment__": "Model type to use for the forward dynamics model",
"forward_dynamics_predictor": "simulator",
    "comment__": "Method to be used for the forward dynamics model is the model types uses a simulator",
"sampling_method": "SequentialMC",
    "comment__": "Use the action suggested by the policy to start the sampling method.",
"use_actor_policy_action_suggestion": true,
    "comment__": "If selecting from a uniform distribution the number of regularly distant samples to take / action dimension",
"num_uniform_action_samples": 2,
    "comment__": "Number of steps ahead the actions should be sampled",
"look_ahead_planning_steps": 2,
    "comment__": "How often to update the training data and plots wrt # of rounds",
"plotting_update_freq_num_rounds": 10,
    "comment__": "How often to save the training data and plotting data",
"saving_update_freq_num_rounds": 10,
    "comment__": "Number of treads that can be run in parallel during training",
"num_available_threads": 1,
    "comment__": "Length of the queues used to pass simulation data between the simulation workers and the learning agent(s).",
"queue_size_limit": 1000,
    "comment__": "Number of actions performed between training updates",
"sim_action_per_training_update": 8,
    "comment__": "Number of rounds of adaptive sampling",
"adaptive_samples": 25,
    "comment__": "Number of elite adaptive samples to keep between adaptive sampling rounds",
"num_adaptive_samples_to_keep": 50,
    "comment__": "Use the variance calculated from the policy network (calculated using dropout)",
"use_actor_policy_action_variance_suggestion": false,
    "comment__": "Method used for action exploration",
"exploration_method": "gaussian_random",
    "comment__": "Amount of dropout to use in the networks (if using a dropout network)",
"dropout_p": 0.1,
    "comment__": "Regularization weight for the policy network",
"regularization_weight": 0.00001,
    "comment__": "Some parameter for rmsprop stocastic gradient optimization method.",
"rho": 0.95,
    "comment__": "Some parameter for rmsprop stocastic gradient optimization method.",
"rms_epsilon": 0.000001,
    "comment__": "Number of training updates before the target network is updated",
"steps_until_target_network_update": 500,
    "comment__": "Initial factor epsilon in multiplied by (This value will slowly be reduced during training)",
"epsilon_annealing": 0.8,
    "comment__": "Different ways of calculating the scaling method used normalize the input and outputs of the network from the bootstrapping samples. minmax, input and output are -mean/max-min. variance, input and output are -mean/(std*2), given, use the bounds provided in this file",
"state_normalization": "given",
    "comment__": "load a pretrained model for the controller",
"load_saved_model": false,
	"comment__": "Number of updates the critic should perform per actor update",
"critic_updates_per_actor_update": 1,
    "comment__": "weather or not to clamp actions to stay inside the action boundaries",
"clamp_actions_to_stay_inside_bounds": true,
    "comment__": "Number of initial actions to sample before calculating input/output scaling and starting to train.",
"bootstrap_samples": 4096,
    "comment__": "What method to use to select actions during bootstrapping",
"bootsrap_with_discrete_policy": true,
    "comment__": "That max number of action that can be take before the end of an episode/epoch",
"max_epoch_length": 500,
    "comment__": "If reward is below this bound it will not be put in the Experience Buffer",
"reward_lower_bound": -5.0,
    "comment__": "The number of training updates to perform for every action that is simulated",
"training_updates_per_sim_action": 1,
    "comment__": "Use the forward dynamics model to perform action exploration wrt to V -> fd > delta Action gradients",
"use_model_based_action_optimization": true,
    "comment__": "Flag for policy evaluation to swap in the task network from one model and the character/robot network from another",
"use_transfer_task_network": false,
    "comment__": "Add a large cost to actions that are suggested to be outside the action bounds.",
"penalize_actions_outside_bounds": false,
    "comment__": "Network type to use for the forward dynamics model",
"forward_dynamics_model_type": "model.ForwardDynamicsDenseNetworkDropout.ForwardDynamicsDenseNetworkDropout",
    "comment__": "Whether or not to save the Experience memory after bootstrapping",
"save_experience_memory": false,
    "comment__": "Whether or not to train the policy and critic?",
"train_rl_learning": true,
    "comment__": "Force the character to start each new action in a good state, close to a good solution",
"use_back_on_track_forcing": false,
    "comment__": "draw/render the next state suggested by the forward dynamics model",
"visualize_forward_dynamics": false,
    "comment__": "Learning rate for the forward dynamics model",
"fd_learning_rate": 0.001,
    "comment__": "Whether or not to train the policy. Used for debugging",
"train_actor": true,
    "comment__": "Plot the terms for the critic as well (regularization and td error)",
"debug_critic": true,
    "comment__": "critic regularization weight",
"critic_regularization_weight": 0.000001,
    "comment__": "Critic learning rate",
"critic_learning_rate": 0.001,
    "comment__": "During evaluation plot of value function",
"visualize_expected_value": true,
    "comment__": "exponential decay value for use in reward function",
"target_velocity_decay":-0.75,
    "comment__": "Target velocity for controller",
"target_velocity":1.5,
    "comment__": "Number of terrain features for which convolutinoal filters should be used",
"num_terrain_features": 0,
    "comment__": "Initial tempurature for annealing of e-greedy exploration",
"initial_temperature": 1.25,
    "comment__": "epsilon lower limit",
"min_epsilon": 0.15,
    "comment__": "Whether or not to draw/render the simulation",
"shouldRender": false,
    "comment__": "Learning rate use for model based action exploration",
"action_learning_rate": 1.0,
    "comment__": "During model-based action exloration, Probability of a random action being generated from MBAE,",
"model_based_action_omega": 0.5,
	"comment__": "visualize the loss and regularization cost of the actor. Warning: might use a lot of memory",
"debug_actor": true,
	"comment__": "float type to use, if for example you want to train on the GPU use float32",
"float_type": "float64",
	"comment__": "What processor type to perform the training on [cpu|gpu]",
"training_processor_type": "cpu",
	"comment__": "optimizer is the type of optimization algorithm to use",
"optimizer": "adam",
	"comment__": "This setting uses a sampling method overtop of simulation",
"use_simulation_sampling": false,
	"comment__": "Variance scaling used for sampling",
"variance_scalling": 0.05,
	"comment__": "Whether or not to parameterize the control via the reward function, also adds parameters to input state",
"use_parameterized_control": false,
	"comment__": "parameter bounds for parameterized controller",
"controller_parameter_settings": {
		"velocity_bounds": [[0.5],[2.5]]
		},
	"comment__": "The parameter used to control the average change in the control parameters",
"average_parameter_change": 0.25,
	"comment__": "Whether or not to train the value function some output from the forward dynamics",
"train_critic_on_fd_output": false,
	"comment__": "Use to add an additional regularization term to prevent the network from moving to far from its previous values",
"use_previous_value_regularization": false,
	"comment__": "Controls the level of information that is printed to the terminal",
"print_level": "train",
	"comment__": "print level descriptions",
"print_levels": {
		"debug": 1,
		"train": 0,
		"hyper_train": -1
		},
	"comment__": "The type of function to apply over the controller target values [gaussian|abs]",
"reward_smoother": "gaussian",
	"comment__": "Weights for different components of the reward function",
"controller_reward_weights": {
		"velocity": 0.8,
		"torque": 0.05,
		"root_height": 0.05,
		"root_pitch": 0.1,
		"right_hand_x_pos": 0.0
		},
	"comment__": "Regularization weight for different between policy parameters and old policy parameters",
"previous_value_regularization_weight":  0.001,
	"comment__": "Random seed value for the simulation to use",
"random_seed": 1234,
	"comment__": "Makes a few changes to the flow of control in order for things to be on policy",
"on_policy": false,
	"comment__": "Whether or not to use a stochastic policy, This adds more outputs to the network and changes the way actions are sampled",
"use_stocastic_policy": false,
	"comment__": "Whether or  not to train the critic at all. Usually used for debugging",
"train_critic": true,
	"comment__": "Whether or not to collects tuples in batches, this can be good for multi-threading or computing furture discounted reward",
"collect_tuples_in_batches":true,
	"comment__": "Whether or not the controller should be reset to a new epoch when a fall occurs(fallen into some kind of non-recoverable state) has occured",
"reset_on_fall":true
}
